Public Class clsDistribuidor
    Inherits clsBaseClass
    Protected m_intIDistribuidor As Integer
    Protected m_strPontos As String
    Protected m_decDesconto As Decimal
    Protected m_decMetaAnual As Decimal
    Protected m_decFatorTabela As Decimal
    Protected m_strLogin As String
    Protected m_strSenha As String
    Protected m_strEmail As String
    Protected m_strObservacao As String
    Protected m_intStatus As Integer
    Protected m_intCliente As Integer

    Public Enum STATUS_DISTRIBUIDOR
        NENHUM = 0
        ATIVO = 1
        PENDENTE = 2
        BLOQUEADO = 3
    End Enum
    Public ReadOnly Property IDDistribuidor() As Integer
        Get
            Return m_intIDistribuidor
        End Get
    End Property

    Public Property Cliente() As Integer
        Get
            Return m_intCliente
        End Get
        Set(ByVal Value As Integer)
            m_intCliente = Value
        End Set
    End Property

    Public Property Pontos() As String
        Get
            Return m_strPontos
        End Get
        Set(ByVal Value As String)
            m_strPontos = Value
        End Set
    End Property

    Public Property Login() As String
        Get
            Return m_strLogin
        End Get
        Set(ByVal Value As String)
            m_strLogin = Value
        End Set
    End Property

    Public Property Senha() As String
        Get
            Return m_strSenha
        End Get
        Set(ByVal Value As String)
            m_strSenha = Value
        End Set
    End Property


    Public Property Email() As String
        Get
            Return m_strEmail
        End Get
        Set(ByVal Value As String)
            m_strEmail = Value
        End Set
    End Property

    Public Property Desconto() As Decimal
        Get
            Return m_decDesconto
        End Get
        Set(ByVal Value As Decimal)
            m_decDesconto = Value
        End Set
    End Property


    Public Property MetaAnual() As Decimal
        Get
            Return m_decMetaAnual
        End Get
        Set(ByVal Value As Decimal)
            m_decMetaAnual = Value
        End Set
    End Property

    Public Property FatorTabela() As Decimal
        Get
            Return m_decFatorTabela
        End Get
        Set(ByVal Value As Decimal)
            m_decFatorTabela = Value
        End Set
    End Property


    Public Property Observacao() As String
        Get
            Return m_strObservacao
        End Get
        Set(ByVal Value As String)
            m_strObservacao = Value
        End Set
    End Property

    Public Property Status() As STATUS_DISTRIBUIDOR
        Get
            Return m_intStatus
        End Get
        Set(ByVal Value As STATUS_DISTRIBUIDOR)
            m_intStatus = Value
        End Set
    End Property

    Public Function Existe(ByVal vIDistribuidor As Integer, ByVal vIDCliente As Integer) As Boolean
        Dim myData As DataSet
        myData = GetDataSet(PREFIXO & "SE_DISTRIBUIDOR_EXISTENTE " & XMPage.IDEmpresa & ", " & vIDistribuidor & ", '" & vIDCliente & "'")
        If myData.Tables(0).Rows.Count > 0 Then
            Existe = True
        Else
            Existe = False
        End If
        myData.Dispose()
        myData = Nothing
    End Function

 

    Protected Overridable Sub Inflate(ByVal row As DataRow)
        m_intIDistribuidor = CLng(0 & row("dis_Distribuidor_int_PK"))
        m_intCliente = row("cli_Cliente_int_Fk") & ""
        m_decDesconto = row("dst_Desconto_num") & ""
        m_decFatorTabela = row("dst_FatorTabela_num") & ""
        m_decMetaAnual = row("dst_MetaAnual_cur") & ""
        m_strPontos = row("dis_pontos_int") & ""
        m_strLogin = row("dis_Login_chr") & ""
        m_strSenha = row("dis_Senha_chr") & ""
        m_strEmail = row("dis_email_chr") & ""
        m_strObservacao = row("dis_Observacao_chr") & ""
        m_intStatus = row("dis_Ativo_ind")


    End Sub

    Private Function Deflate() As String
        Dim strDeflate As String
        strDeflate &= m_intIDistribuidor & ", "
        strDeflate &= XMPage.IDEmpresa & ", "
        strDeflate &= m_intCliente & ", "
        strDeflate &= m_decDesconto & ", "
        strDeflate &= m_decFatorTabela & ", "
        strDeflate &= m_decMetaAnual & ", "
        strDeflate &= m_strPontos & ",'"
        strDeflate &= m_strLogin & "','"
        strDeflate &= m_strSenha & "','"
        strDeflate &= m_strEmail & "','"
        strDeflate &= m_strObservacao & "',"
        strDeflate &= m_intStatus

        Return strDeflate
    End Function

    Public Function Update()
        Dim sql As String
        sql = PREFIXO & "SV_DISTRIBUIDOR " & Deflate()
        Dim myData As DataSet
        myData = GetDataSet(sql)
        If myData.Tables(0).Rows.Count <= 0 Then
            Throw New ArgumentException("There was no data response!")
        Else
            Inflate(myData.Tables(0).Rows(0))
        End If
        myData.Dispose()
    End Function

    Public Sub Load(ByVal m_intIDistribuidor As Integer)
        If m_intIDistribuidor = 0 Then
            Clear()
            Exit Sub
        End If
        Dim myData As DataSet
        myData = GetDataSet(PREFIXO & "SE_DISTRIBUIDOR " & m_intIDistribuidor & ", " & XMPage.IDEmpresa)
        If myData.Tables(0).Rows.Count <= 0 Then
            Throw New ArgumentException("This key does not exist!")
        Else
            Inflate(myData.Tables(0).Rows(0))
        End If
        myData.Dispose()
    End Sub

    Protected Sub Clear()
        m_intIDistribuidor = 0
        m_strPontos = ""
        m_strEmail = ""
        m_strObservacao = ""
        m_strLogin = ""
        m_strSenha = ""
        m_decDesconto = 30
        m_intStatus = 0
    End Sub

    Public Sub Delete()
        ExecuteNonQuery(PREFIXO & "DE_Distribuidor " & m_intIDistribuidor & ", " & XMPage.IDEmpresa)
        Clear()
    End Sub

    Public Sub Delete(ByVal vIDs As String)
        ExecuteNonQuery(PREFIXO & "DE_Distribuidor_SEL '" & vIDs.Replace("'", "''") & "', " & XMPage.IDEmpresa)
        Clear()
    End Sub

    Public Sub New(ByVal vXMPage As XMWebPage)
        MyBase.New(vXMPage)
        Clear()
    End Sub

    Public Function Listar() As DataSet
        Return Listar("", "", False, 0, 0)
    End Function


    Public Function Listar(ByVal vFilter As String, ByVal vOrder As String, ByVal vDescending As Boolean, ByVal vPage As Integer, ByVal vPageSize As Integer) As DataSet
        Listar = GetDataSet(PREFIXO & "NV_DISTRIBUIDORES " & XMPage.IDEmpresa & ", '" & vFilter & "','" & vOrder & "'," & IIf(vDescending, 1, 0) & ", " & vPage & ", " & vPageSize)
    End Function

    Public Function ListarHabilitados() As DataSet
        Return GetDataSet(PREFIXO & "LS_DistribuidorES_HABILITADOS " & XMPage.IDEmpresa)
    End Function

    Public Function ListarGrupos() As DataSet
        Return GetDataSet(PREFIXO & "LS_GRUPOS_Distribuidor " & XMPage.IDEmpresa & ", " & m_intIDistribuidor)
    End Function

    Public Function ListarClientes() As DataSet
        Return GetDataSet(PREFIXO & "LS_CLIENTES_DISTRIBUIDOR " & XMPage.IDEmpresa & ", " & m_intIDistribuidor)
    End Function

    Public Function ListarFiltro() As DataSet
        Return GetDataSet(PREFIXO & "LS_DistribuidorES_FILTRO " & XMPage.IDEmpresa)
    End Function

    Public Function List() As DataSet
        Return GetDataSet(PREFIXO & "LS_DistribuidorES " & XMPage.IDEmpresa)
    End Function

    Public Function ListAll() As DataSet
        Return GetDataSet(PREFIXO & "LS_DistribuidorES_TODOS " & XMPage.IDEmpresa)
    End Function

End Class


Public Class clsLista2
    Private m_strLista As String

    Public Sub Clear()
        m_strLista = ""
    End Sub

    Public Sub New()
        m_strLista = ""
    End Sub

    Public Function GetLista() As String
        Return m_strLista
    End Function

    Public Sub Add(ByVal vID As Integer)
        If m_strLista = "" Then
            m_strLista = vID
        Else
            m_strLista &= "," & vID
        End If
    End Sub

End Class
